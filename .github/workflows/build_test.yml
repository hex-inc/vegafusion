name: build_test
on:
  pull_request:
    types: [opened, synchronize]
env:
  RUSTFLAGS: "--cfg unsound_local_offset"
jobs:
#  rust-fmt-clippy:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Install latest stable Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#          components: rustfmt, clippy
#      - name: Cache rust dependencies
#        uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: True
#      - name: Check cargo fmt compliance
#        run: cargo fmt --all -- --check
#      - name: Check for clippy warnings
#        run: cargo clippy

#  test-rust:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os:
#         - ubuntu-20.04
#         - windows-2019
#         - macos-10.15
#
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@v2
#      - name: Install apt system dependencies needed to build nodecanvas
#        run: |
#          sudo apt-get install -y libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
#        if: ${{ runner.os == 'Linux' }}
#      - name: Install latest stable Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          override: true
#      - name: Install node
#        uses: actions/setup-node@v2
#        with:
#          node-version: '17'
#      - name: Install test node dependencies
#        working-directory: vegafusion-rt-datafusion/tests/util/vegajs_runtime
#        run: |
#          npm install
#      - name: Cache rust dependencies
#        uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: True
#      - name: Run Rust Tests
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#          args: --all-features

  build-vegafusion-python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
#         - ubuntu-20.04
#         - windows-2019
         - macos-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: True
      - name: Update XCode
        if: ${{ runner.os == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 12.5
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          manylinux: 2010
          args: --release -m vegafusion-python/Cargo.toml --strip
      - name: Download Apple Silicon toolchain
        if: ${{ runner.os == 'macOS' }}
        run: |
          rustup target add aarch64-apple-darwin
      - name: Build Apple Silicon wheels
        if: ${{ runner.os == 'macOS' }}
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          args: --release -m vegafusion-python/Cargo.toml --strip --target aarch64-apple-darwin -i python3.10 -i python3.9 -i python3.8 -i python3.7
      - name: Remove unwanted universal
        if: ${{ runner.os == 'macOS' }}
        run: |
          rm -rf target/wheels/*universal2*.whl
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vegafusion-python-wheels
          path: |
            target/wheels/*cp37*.whl
            target/wheels/*cp38*.whl
            target/wheels/*cp39*.whl
            target/wheels/*cp310*.whl

  build-vegafusion-wasm:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Build package
        working-directory: vegafusion-wasm/
        run: |
          npm run build
          wasm-pack pack
          cd pkg
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vegafusion-wasm-packages
          path: vegafusion-wasm/pkg


  build-vegafusion-jupyter:
    needs: [build-vegafusion-python, build-vegafusion-wasm]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: vegafusion_dev
          miniforge-version: latest
          environment-file: python/vegafusion-jupyter/conda-linux-64-cp310.lock.yml
      - name: Download vegafusion-wasm packages
        uses: actions/download-artifact@v2
        with:
          name: vegafusion-wasm-packages
          path: vegafusion-wasm/pkg
      - name: Download vegafusion-python wheel
        uses: actions/download-artifact@v2
        with:
          name: vegafusion-python-wheels
          path: target/wheels/
      - name: Install vegafusion-python
        run: |
          which python
          python --version
          which pip
          pip --version
          python -m pip install target/wheels/vegafusion_python-*-cp310-*.manylinux2010_x86_64.whl
      - name: Link vegafusion-wasm
        working-directory: vegafusion-wasm/pkg
        run: |
          npm link
      - name: Build vegafusion-jupyter
        working-directory: python/vegafusion-jupyter
        run: |
          npm link vegafusion-wasm
          python setup.py bdist_wheel
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vegafusion-jupyter-packages
          path: python/vegafusion-jupyter/dist/*.whl

  test-vegafusion-jupyter:
    needs: [ build-vegafusion-jupyter ]
    strategy:
      matrix:
        options: [
            [ubuntu-20.04,  linux-64, "bash -l {0}",  manylinux2010_x86_64, cp310],
# TODO: Should run tests on Windows and Mac as well, but there a GitHub action issues
#            [windows-2019,  win-64,   "pwsh",         win_amd64,            cp37],
#            [macos-10.15,   osx-64,   "bash -l {0}",  macosx_10_7_x86_64,   cp37],
        ]
    runs-on: ${{ matrix.options[0] }}
    defaults:
      run:
        shell: ${{ matrix.options[2] }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Create conda test environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: vegafusion_dev
          miniforge-version: latest
          environment-file: python/vegafusion-jupyter/conda-${{ matrix.options[1] }}-${{ matrix.options[4] }}.lock.yml
      - name: Install Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable
      - name: Download vegafusion-python wheel
        uses: actions/download-artifact@v2
        with:
          name: vegafusion-jupyter-packages
          path: target/wheels/
      - name: Download vegafusion-jupyter wheel
        uses: actions/download-artifact@v2
        with:
          name: vegafusion-python-wheels
          path: target/wheels/
      - name: install wheels
        working-directory: target/wheels/
        run: |
          pip install vegafusion_python*${{ matrix.options[4] }}*${{ matrix.options[3] }}*.whl
          pip install vegafusion_jupyter*.whl
      - name: Test vegafusion-jupter
        env:
          VEGAFUSION_TEST_HEADLESS: 1
        working-directory: python/vegafusion-jupyter/tests/
        run: pytest
