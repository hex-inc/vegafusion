name: build_test
on:
  pull_request:
    types: [ opened, synchronize ]
jobs:
#  check-rust:
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Check fmt
#        run: pixi run check-rs-fmt
#      - name: Check warnings
#        run: pixi run check-rs-warnings
#      - name: Check clippy
#        run: pixi run check-rs-clippy
#
#  test-rust:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os:
#          - ubuntu-20.04
#          - windows-2022
#          - macos-11
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi (linux / osx)
#        if: ${{ runner.os != 'Windows' }}
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Install pixi (windows)
#        if: ${{ runner.os == 'Windows' }}
#        run: |
#          iwr -useb https://pixi.sh/install.ps1 | iex
#          echo "${HOME}/AppData/Local/pixi/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Test rust
#        run: |
#          pixi install -vvv
#          pixi run test-rs --release
#      - name: Upload test artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        if: always()
#        with:
#          name: vegafusion-rt-test-images
#          path: |
#            vegafusion-runtime/tests/output
#
#  build-vegafusion-wasm:
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi (linux / osx)
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Build package
#        run: |
#          pixi run pack-wasm
#      - name: Upload artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        with:
#          name: vegafusion-wasm-packages
#          path: vegafusion-wasm/pkg/vegafusion-wasm-*.tgz

  # Use maturin action to build linux wheels within proper manylinux compatible containers
  # (This is why we don't use the pixi "build-py-embed" action)
  build-vegafusion-python-embed-linux-64:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
      - name: Install latest stable Rust toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # pin@v1
        with:
          toolchain: stable
          override: true
      - name: Cache rust dependencies
        uses: Swatinem/rust-cache@81d053bdb0871dcd3f10763c8cc60d0adc41762b # pin@v1
        with:
          cache-on-failure: True
      - name: Build wheels (Linux)
        uses: messense/maturin-action@9357a23898d2fca5ef8da7ac38aaaedab4ef218f # pin@v1.40.2
        with:
          command: build
          manylinux: 2014
          rust-toolchain: stable
          args: --release -m vegafusion-python-embed/Cargo.toml --features=protobuf-src --strip
      - name: Upload artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
        with:
          name: vegafusion-python-embed-wheels
          path: |
            target/wheels/*.tar.gz
            target/wheels/*.whl

#  build-vegafusion-python-embed-linux-arm64:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install latest stable Rust toolchain
#        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # pin@v1
#        with:
#          toolchain: stable
#          override: true
#      - name: Cache rust dependencies
#        uses: Swatinem/rust-cache@81d053bdb0871dcd3f10763c8cc60d0adc41762b # pin@v1
#        with:
#          cache-on-failure: True
#      - name: Download arm64 toolchain
#        run: |
#          rustup target add aarch64-unknown-linux-gnu
#      - name: Build arm64 wheels
#        uses: messense/maturin-action@6d52485c3b3044e20b4c8ee6ce6f61e20a7645b0 # pin@v1
#        with:
#          command: build
#          manylinux: 2014
#          rust-toolchain: stable
#          args: --release -m vegafusion-python-embed/Cargo.toml --features=protobuf-src --strip --target aarch64-unknown-linux-gnu
#      - name: Upload artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        with:
#          name: vegafusion-python-embed-wheels
#          path: |
#            target/wheels/*.tar.gz
#            target/wheels/*.whl
#
#  build-vegafusion-python-embed-win-64:
#    runs-on: windows-2022
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi
#        run: |
#          iwr -useb https://pixi.sh/install.ps1 | iex
#          echo "${HOME}/AppData/Local/pixi/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}-embed
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Build vegafusion-python-embed
#        run: |
#          pixi install -vvv
#          pixi run build-py-embed
#      - name: Upload artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        with:
#          name: vegafusion-python-embed-wheels
#          path: |
#            target/wheels/*.tar.gz
#            target/wheels/*.whl
#
#  build-vegafusion-python-embed-osx-64:
#    runs-on: macos-11
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}-embed
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Build vegafusion-python-embed
#        run: |
#          pixi run build-py-embed
#      - name: Upload artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        with:
#          name: vegafusion-python-embed-wheels
#          path: |
#            target/wheels/*.tar.gz
#            target/wheels/*.whl
#
#  build-vegafusion-python-embed-osx-arm64:
#    runs-on: macos-11
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: osx-arm64-${{ hashFiles('pixi.lock') }}-server
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Build vegafusion-server
#        run: |
#          pixi run python automation/download_rust_target.py aarch64-apple-darwin
#          pixi run build-py-embed --target aarch64-apple-darwin
#      - name: Upload artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        with:
#          name: vegafusion-python-embed-wheels
#          path: |
#            target/wheels/*.tar.gz
#            target/wheels/*.whl


  build-vegafusion-packages:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
      - name: Install pixi (linux / osx)
        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
      - name: Cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}
          path: |
            ~/.cargo
            target
            .pixi
      - name: Build vegafusion wheel
        run: |
          pixi run build-py-vegafusion
      - name: Upload artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
        with:
          name: vegafusion-packages
          path: |
            python/vegafusion/dist/*.whl
            python/vegafusion/dist/*.tar.gz

  build-vegafusion-jupyter-packages:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
      - name: Install pixi (linux / osx)
        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
      - name: Cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}-jupyter
          path: |
            ~/.cargo
            target
            .pixi
      - name: Build vegafusion-jupyter wheel
        run: |
          echo JupyterLab Version: `pixi run jupyter-lab --version`
          pixi run build-py-jupyter
      - name: Upload artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
        with:
          name: vegafusion-jupyter-packages
          path: |
            python/vegafusion-jupyter/dist/*.whl
            python/vegafusion-jupyter/dist/*.tar.gz


  test-vegafusion-python-linux-64:
    runs-on: ubuntu-20.04
    needs: [build-vegafusion-python-embed-linux-64, build-vegafusion-packages]
    steps:
      - name: Check out repository code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
      - name: Setup Python
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # pin@4.7
        with:
          python-version: '3.10'
      - name: Download vegafusion-python-embed wheel
        uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281 # pin@v2
        with:
          name: vegafusion-python-embed-wheels
          path: target/wheels/
      - name: Download vegafusion wheel
        uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281 # pin@v2
        with:
          name: vegafusion-packages
          path: target/wheels/
      - name: install wheels
        working-directory: target/wheels/
        run: |
          ls -la
          python -m pip install vegafusion-*.whl
          python -m pip install vegafusion_python_embed-*manylinux_2_17_x86_64*.whl
          python -m pip install pytest vega-datasets polars duckdb vl-convert-python scikit-image
      - name: Test vegafusion
        working-directory: python/vegafusion/
        run: pytest

#  test-vegafusion-python:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os:
#          - ubuntu-20.04
#          - windows-2022
#          - macos-11
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi (linux / osx)
#        if: ${{ runner.os != 'Windows' }}
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Install pixi (windows)
#        if: ${{ runner.os == 'Windows' }}
#        run: |
#          iwr -useb https://pixi.sh/install.ps1 | iex
#          echo "${HOME}/AppData/Local/pixi/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Test vegafusion python
#        run: |
#          pixi run test-py-vegafusion
#


  test-vegafusion-jupyter-linux-64:
    runs-on: ubuntu-20.04
    needs:
     - build-vegafusion-python-embed-linux-64
     - build-vegafusion-packages
     - build-vegafusion-jupyter-packages
    steps:
      - name: Check out repository code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
      - name: Setup Python
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # pin@4.7
        with:
          python-version: '3.10'
      - name: Download vegafusion-python-embed wheel
        uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281 # pin@v2
        with:
          name: vegafusion-python-embed-wheels
          path: target/wheels/
      - name: Download vegafusion wheel
        uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281 # pin@v2
        with:
          name: vegafusion-packages
          path: target/wheels/
      - name: Download vegafusion-jupyter wheel
        uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281 # pin@v2
        with:
          name: vegafusion-jupyter-packages
          path: target/wheels/
      - name: install wheels
        working-directory: target/wheels/
        run: |
          ls -la
          python -m pip install vegafusion_python_embed-*manylinux_2_17_x86_64*.whl
          python -m pip install vegafusion-*.whl
          python -m pip install vegafusion-jupyter-*.whl
          python -m pip install pytest vega-datasets polars duckdb vl-convert-python scikit-image jupytext selenium tenacity flaky chromedriver-binary-auto
      - name: Install Chrome
        uses: browser-actions/setup-chrome@f0ff752add8c926994566c80b3ceadfd03f24d12 # pin@latest
        with:
          chrome-version: stable
      - name: Test vegafusion
        working-directory: python/vegafusion/
        run: pytest


#  test-vegafusion-jupyter:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os:
#          - ubuntu-20.04
#          - macos-11
#          # # The windows case hangs after installing chromedriver-binary-auto
#          # - windows-2022
#    steps:
#      - name: Check out repository code
#        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # pin@v3.5.2
#      - name: Install pixi (linux / osx)
#        if: ${{ runner.os != 'Windows' }}
#        run: curl -fsSL https://pixi.sh/install.sh | bash && echo "${HOME}/.pixi/bin" >> $GITHUB_PATH
#      - name: Cache
#        uses: actions/cache@v3
#        with:
#          key: ${{ runner.os }}-${{ hashFiles('pixi.lock') }}
#          path: |
#            ~/.cargo
#            target
#            .pixi
#      - name: Install pixi (windows)
#        if: ${{ runner.os == 'Windows' }}
#        run: |
#          iwr -useb https://pixi.sh/install.ps1 | iex
#          echo "${HOME}/AppData/Local/pixi/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#      - name: Install Chrome
#        uses: browser-actions/setup-chrome@f0ff752add8c926994566c80b3ceadfd03f24d12 # pin@latest
#        with:
#          chrome-version: stable
#      - name: Test vegafusion jupyter
#        run: |
#          pixi install -vvv
#          echo JupyterLab Version: `pixi run jupyter-lab --version`
#          pixi run test-py-jupyter-headless
#      - name: Upload test artifacts
#        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # pin@v3.1.2
#        if: always()
#        with:
#          name: vegafusion-jupyter-test-failures
#          path: |
#            python/vegafusion-jupyter/tests/failures/*
