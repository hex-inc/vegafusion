plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

def versionId = new File('version.txt').text.trim()

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'io.vegafusion'
            artifactId = 'vegafusion'
            version = versionId
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'VegaFusion'
                description = 'Server-side scaling for Vega visualizations'
                url = 'https://vegafusion.io/'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://spdx.org/licenses/BSD-3-Clause.html'
                    }
                }
                developers {
                    developer {
                        id = 'jonmmease'
                        name = 'Jon Mease'
                        email = 'jonmmease@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/hex-inc/vegafusion.git'
                    developerConnection = 'scm:git:git@github.com:hex-inc/vegafusion.git'
                    url = 'https://github.com/hex-inc/vegafusion'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'ossrh'
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                def ossrhUsernameProvider = providers.gradleProperty('ossrhUsername')
                def ossrhPasswordProvider = providers.gradleProperty('ossrhPassword')

                username = ossrhUsernameProvider.orNull
                password = ossrhPasswordProvider.orNull
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

jar {
    manifest {
        attributes "Main-Class": "io.vegafusion.VegaFusionRuntime"
    }
    archiveBaseName.set('vegafusion')
    archiveVersion.set(versionId)

    // Validate that VEGAFUSION_JNI_LIBRARIES is set and valid
    doFirst {
        def nativeLibDir = System.getenv('VEGAFUSION_JNI_LIBRARIES')
        if (nativeLibDir == null) {
            throw new GradleException(
                    'VEGAFUSION_JNI_LIBRARIES environment variable is not set'
            )
        }

        // Validate the expected subdirectories
        def subdirs = ['linux-64', 'osx-64', 'osx-arm64', 'win-64']
        subdirs.each { subdir ->
            def subdirPath = new File(nativeLibDir, subdir)
            if (!subdirPath.isDirectory()) {
                throw new GradleException("Expected subdirectory $subdir does not exist in $nativeLibDir")
            }
        }
    }

    def nativeLibDir = System.getenv('VEGAFUSION_JNI_LIBRARIES')
    from(nativeLibDir) {
        into "native"
    }
}
