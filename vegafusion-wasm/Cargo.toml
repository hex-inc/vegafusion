[package]
name = "vegafusion-wasm"
version = "0.1.0"
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
serde_json = "1.0.68"
serde = { version = "1.0", features = ["derive"] }
wasm-bindgen = {version="0.2.78", features=["serde-serialize"]}
wasm-bindgen-futures = "0.4.28"
js-sys = "0.3.55"
vegafusion-core = {path="../vegafusion-core"}
getrandom = { version = "0.2.3", features = ["js"] }
prost = "0.8.0"
prost-types = "0.8.0"
indexmap = "=1.6.2"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
## Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
#wee_alloc = { version = "0.4.5", optional = true }
wee_alloc = { version = "0.4.5" }

tokio-tungstenite = {version="0.15.0", optional = true}
tokio = {version="1.12.0", features=["macros", "rt-multi-thread"], optional=true}
futures-util = {version="0.3.17", optional=true}
vegafusion-rt-datafusion = {path="../vegafusion-rt-datafusion", optional=true}

[dependencies.web-sys]
version = "0.3.55"
features = [
    'Document',
    'Element',
    'HtmlElement',
    'Node',
    'Window',
]

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
## Tell `rustc` to optimize for small code size.
opt-level = "s"
lto = true

[package.metadata.wasm-pack.profile.release]
wasm-opt = ['-Os']

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = false

[[example]]
name = "websocket_server"
required-features = ["tokio-tungstenite", "tokio", "futures-util", "vegafusion-rt-datafusion"]
